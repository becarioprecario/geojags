
#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer zz_create_buffer
#define yy_delete_buffer zz_delete_buffer
#define yy_flex_debug zz_flex_debug
#define yy_init_buffer zz_init_buffer
#define yy_flush_buffer zz_flush_buffer
#define yy_load_buffer_state zz_load_buffer_state
#define yy_switch_to_buffer zz_switch_to_buffer
#define yyin zzin
#define yyleng zzleng
#define yylex zzlex
#define yylineno zzlineno
#define yyout zzout
#define yyrestart zzrestart
#define yytext zztext
#define yywrap zzwrap
#define yyalloc zzalloc
#define yyrealloc zzrealloc
#define yyfree zzfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE zzrestart(zzin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int zzleng;

extern FILE *zzin, *zzout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up zztext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via zzrestart()), so that the user can continue scanning by
	 * just pointing zzin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when zztext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int zzleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow zzwrap()'s to do buffer switches
 * instead of setting up a fresh zzin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void zzrestart (FILE *input_file  );
void zz_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE zz_create_buffer (FILE *file,int size  );
void zz_delete_buffer (YY_BUFFER_STATE b  );
void zz_flush_buffer (YY_BUFFER_STATE b  );
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void zzpop_buffer_state (void );

static void zzensure_buffer_stack (void );
static void zz_load_buffer_state (void );
static void zz_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER zz_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE zz_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE zz_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE zz_scan_bytes (yyconst char *bytes,int len  );

void *zzalloc (yy_size_t  );
void *zzrealloc (void *,yy_size_t  );
void zzfree (void *  );

#define yy_new_buffer zz_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *zzin = NULL, *zzout = NULL;

typedef int yy_state_type;

extern int zzlineno;

int zzlineno = 1;

extern char *zztext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr zztext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yynoreturn yy_fatal_error (yyconst char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up zztext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	zzleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[287] =
    {   0,
        0,    0,    0,    0,   51,   51,    0,    0,   82,   81,
       54,   57,   81,   81,   81,   42,   43,   46,   39,   78,
       77,   78,   68,   47,   48,   81,   44,   77,   40,   78,
       41,   49,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   56,   78,   77,
       66,   77,   77,   77,   77,   77,   51,   52,   59,   60,
       54,    0,   79,    0,   55,    0,   80,   78,   78,   68,
       77,   77,   65,   50,   63,   78,   45,   77,   77,   15,
       35,   77,   77,   77,   77,   77,   77,   77,   77,    3,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,    4,   77,   77,   77,   56,   66,   77,
       67,   71,   77,   77,    0,   75,   77,   77,   51,   52,
       52,   53,   59,   65,   77,   63,   78,    0,   78,   77,
       77,   77,   77,   77,   77,   77,   34,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   36,   24,   37,
       77,   77,   19,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   78,    0,   77,    0,   78,
       61,   61,   77,   77,   77,   77,   29,   77,    2,   33,
       77,   77,   77,   38,   31,   77,   77,   77,   77,   77,
       77,   28,   30,   77,   21,   18,   77,   77,   77,   69,

       72,   77,   77,   77,   78,   64,   64,   62,   62,   12,
       77,   10,   20,   77,   77,   77,   77,    5,    1,   77,
       77,   77,   77,   77,   77,   77,   77,   70,   77,    0,
       74,   77,   64,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   58,   32,   11,   77,   77,   77,    7,
       77,   25,   77,   77,   27,   16,    8,   77,   22,   77,
       77,   77,   77,   77,   77,   17,   77,   23,   77,   77,
       14,   26,   77,   77,   77,   77,   77,   13,    9,    6,
       77,    0,   73,    0,   76,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,    1,    1,    1,   21,   22,   22,   23,   24,   22,
       22,   22,   22,   22,   22,   25,   22,   26,   22,   22,
       22,   22,   22,   22,   27,   22,   22,   22,   22,   22,
       28,   29,   30,    1,   29,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   22,   22,   41,   42,   43,
       44,   45,   22,   46,   47,   48,   49,   22,   50,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    4,    4,    4,    4,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    1,    4,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[298] =
    {   0,
        0,    0,   51,   96,  325,  323,  326,  322,  321, 1235,
       53, 1235,  310,  306,  301, 1235, 1235, 1235, 1235,   42,
       46,  296,   52, 1235, 1235,  289, 1235,   57, 1235,    0,
     1235, 1235,   65,   74,  131,   89,  104,  110,   72,  117,
       97,  130,  141,  149,  167,  142,  177,  296,   55,  194,
      210,  212,  201,   89,  212,   75,    0,   64,    0, 1235,
       80,  286, 1235,  278, 1235,  254, 1235,    0,  228,  241,
        0,  222,  143, 1235,  213,   82, 1235,  227,  228,  230,
      235,  236,  237,  251,  262,  265,  264,  271,  286,  288,
      294,  295,  309,  310,  320,  321,  332,  339,  346,  343,

      357,  360,  362,  365,  379,  381,  391,  240,  420,  401,
        0,  406,  414,  415,  123, 1235,  423,  428,    0,   86,
      124, 1235,    0,  441,   95,  445,  137,  215,  214,  446,
      444,  460,  454,  457,  471,  460,  478,  479,  481,  486,
      489,  492,  504,  510,  515,  517,  518,  520,  525,  528,
      539,  544,  551,  558,  546,  569,  571,  569,  579,  582,
      584,  597,  603,  592,  605,  176,  198,  197,  189,  188,
      184,  181,  610,  616,  624,  627,  629,  634,  648,  651,
      650,  656,  665,  666,  674,  680,  688,  698,  699,  701,
      701,  713,  720,  724,  726,  731,  733,  734,  739,  741,

      748,  756,  793,  771,  180,  162,  147,  137,  124,  758,
      774,  787,  795,  803,  811,  785,  817,  822,  824,  827,
      827,  842,  846,  848,  855,  860,  857,  870,  876,  160,
     1235,  878,  119,  879,  881,  900,  900,  910,  918,  925,
      933,  931,  946,  949,  952,  954,  955,  963,  973,  978,
      981,  984,  987, 1002,  992, 1005,  995, 1013, 1019, 1024,
     1027, 1032, 1038, 1046, 1051, 1045, 1060, 1069, 1075, 1077,
     1078, 1083, 1084, 1086, 1092, 1101, 1140, 1109, 1114, 1119,
     1150,  193, 1235,  230, 1235, 1235, 1202, 1206, 1210, 1214,
     1218,  120,   59, 1222, 1226, 1230,   56

    } ;

static yyconst flex_int16_t yy_def[298] =
    {   0,
      286,    1,    1,    1,  287,  287,  288,  288,  286,  286,
      286,  286,  289,  290,  291,  286,  286,  286,  286,  292,
      293,  292,  292,  286,  286,  286,  286,  293,  286,  292,
      286,  286,  293,  293,  293,  293,  293,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,  286,  292,  293,
      292,  293,   35,   35,   35,   45,  294,  295,  296,  286,
      286,  289,  286,  290,  286,  291,  286,  292,  292,  292,
      297,   45,  297,  286,  292,  292,  286,   45,   45,   45,
       45,   45,   45,   35,   45,   45,   45,   45,   45,   45,
       45,   45,   35,   35,   35,   35,   35,   35,   35,   45,

       45,   45,   45,   45,   45,   35,   35,  286,  292,   45,
      292,   45,   45,   45,  286,  286,   45,   45,  294,  295,
      295,  286,  296,  292,  297,  292,  292,  286,  292,   45,
       35,   35,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   35,   45,   45,   45,   45,   45,   45,   45,
       45,   35,   35,   35,   45,   45,   45,   35,   45,   45,
       45,   45,   45,   45,   45,  292,  286,  297,  286,  292,
      286,  292,   45,   45,   45,   45,   45,   45,   45,   45,
       35,   45,   45,   45,   45,   35,   35,   45,   45,   45,
       35,   35,   35,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,  292,  286,  297,  286,  292,   45,
       35,   35,   35,   35,   35,   45,   45,   45,   45,   45,
       35,   35,   45,   45,   45,   35,   45,   45,   45,  286,
      286,   45,  292,   45,   45,   45,   35,   35,   35,   35,
       35,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  286,  286,  286,  286,    0,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286

    } ;

static yyconst flex_uint16_t yy_nxt[1289] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   18,
       10,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   28,   28,   28,   28,   28,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   28,   28,   39,
       40,   41,   42,   28,   43,   44,   45,   46,   47,   28,
       28,   28,   28,   48,   61,   69,   61,   70,   71,   71,
       71,   73,   72,   49,   50,   75,   51,   70,   69,   71,
      109,   71,   71,  121,   71,   76,   52,   71,  122,   71,
       71,   61,   53,   61,   54,   71,   71,   76,   71,   71,
      115,   55,  128,   71,  129,  286,  116,   56,   48,   78,

      286,   71,   71,   71,   71,  167,   72,  168,   49,   50,
       72,   51,   72,   79,   90,   72,   71,   71,   71,   71,
       85,   52,  118,   68,  115,   80,   72,   53,   86,   54,
      116,   72,   71,  121,  233,   72,   55,   72,  122,  209,
       93,   88,   56,   71,   72,   71,   71,  169,   72,  170,
       72,   72,  208,   89,   87,   72,   91,   72,   73,   71,
       92,  230,  207,   94,   72,   81,  125,  231,   72,   82,
       72,   83,   95,   72,   84,   72,   72,  206,  125,   72,
      103,   72,   72,   72,   72,  104,  167,   72,  205,   72,
       96,   97,   72,  105,  282,  233,  172,   98,   99,  171,

      283,   72,  100,  209,  208,   72,   71,   72,   71,   73,
       72,   72,  207,  206,  101,   72,  110,   72,  102,  106,
       72,  107,   71,   75,   71,  109,   71,   71,  126,  172,
      171,  284,  112,   76,  111,   78,  127,  285,  113,   72,
       71,   72,  108,  124,   72,   76,   72,  114,  127,   79,
       72,  117,   72,   72,   75,   92,   70,   72,  130,   72,
       67,   72,   72,   72,   76,   72,   72,  132,   72,   72,
       72,   72,  133,   72,   72,  131,   76,   72,   72,   72,
       65,   72,   72,   72,   72,  134,   72,   72,   72,   72,
       63,   72,  135,   72,   72,   72,   72,   72,  108,   72,

       72,   77,   72,  138,  139,   74,   72,   67,   65,  136,
      137,   72,   72,   72,   63,   72,   72,   72,   72,   72,
      286,   72,   72,   72,   60,   72,  143,  141,   60,   72,
       72,  140,   58,   72,   58,   72,  286,   72,  286,   72,
      142,   72,   72,  144,   72,   72,   72,   72,  146,   72,
       72,  145,   72,   72,   72,  148,  286,  286,   72,   72,
       72,   72,  286,   72,   72,  147,   72,  286,  286,  149,
       72,  286,   72,   72,   72,   72,  286,   72,  152,   72,
       72,  150,   72,  286,   72,  286,   72,  151,   72,   72,
      153,   72,  154,   72,   72,   72,   72,   72,  286,  286,

       72,  156,  286,  286,   72,  286,  155,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  286,  286,   72,
      286,  158,  286,  157,   72,  159,   72,  286,  163,   72,
       72,   72,  160,   75,   72,  109,   72,   72,  162,  286,
      161,   72,  286,   76,  111,   72,   72,  286,   72,   72,
       72,  286,   72,   72,   72,   76,  124,   72,   72,   72,
      126,   72,   72,  154,  166,   72,   72,  286,  127,  164,
       72,  286,  286,  165,   72,   72,  166,   72,   72,   72,
      127,   72,   72,  286,   72,  176,  286,  174,  177,   72,
      173,  179,   72,   72,   72,   72,  286,   72,   72,  175,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  178,   72,   72,   72,  182,
       72,   72,   72,   72,   72,   72,  180,   72,  181,   72,
       72,  286,   72,   72,  286,  286,  183,   72,  185,  184,
       72,   72,   72,   72,   72,  186,   72,   72,  189,  190,
       72,   72,   72,   72,  188,   72,   72,   72,  187,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  286,   72,   72,   72,   72,  192,   72,
      286,   72,   72,  191,   72,   72,   72,   72,  286,   72,
       72,   72,   72,  194,   72,  286,   72,   72,   72,  193,

       72,   72,   72,   72,   72,  286,  196,   72,  286,   72,
      198,  195,  197,   72,   72,   72,   72,   72,   72,   72,
       72,  201,   72,   72,  286,  200,   72,   72,   72,  199,
       72,   72,   72,   72,   72,   72,   72,  286,   72,  203,
       72,   72,  202,   72,   72,   72,  286,  211,   72,  286,
       72,   72,   72,  204,   72,   72,   72,  210,   72,   72,
       72,   72,   72,   72,   72,   72,  212,   72,  286,   72,
      286,   72,  213,  214,   72,   72,   72,  286,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  286,
       72,  216,  286,  215,  286,   72,   72,   72,   72,   72,

       72,   72,   72,   72,  217,   72,  286,   72,  286,   72,
      286,  218,   72,   72,   72,  286,   72,   72,   72,  286,
      219,   72,   72,   72,  286,   72,   72,  286,  220,   72,
       72,   72,   72,   72,   72,   72,   72,  286,  222,   72,
      286,  224,  223,  286,   72,  221,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  225,
       72,   72,   72,   72,  226,   72,   72,  286,   72,   72,
      228,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  227,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  230,   72,  286,  286,  229,   72,

      231,  286,   72,   72,  232,   72,   72,   72,  234,   72,
      286,  286,   72,  286,   72,  286,  237,   72,   72,  286,
       72,   72,   72,  286,   72,   72,  286,   72,   72,   72,
       72,  286,   72,   72,  286,   72,   72,   72,   72,  286,
       72,   72,  286,  235,   72,   72,   72,  286,  238,   72,
      286,   72,   72,   72,   72,   72,  236,   72,   72,   72,
      286,   72,  239,  286,   72,   72,  286,   72,   72,   72,
      240,   72,  286,   72,   72,   72,   72,   72,   72,   72,
       72,  242,   72,  243,  241,   72,   72,  286,   72,  286,
       72,  286,  246,   72,  245,   72,  244,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      249,   72,   72,   72,   72,  286,  250,   72,  286,  286,
      286,   72,  286,  247,  286,  248,   72,   72,   72,   72,
       72,   72,   72,  286,  253,   72,  286,  286,   72,  251,
       72,  286,  286,   72,   72,  286,  286,   72,   72,  286,
      254,  252,   72,   72,  286,  286,   72,  286,   72,   72,
      286,   72,   72,   72,  255,   72,   72,   72,   72,  286,
      256,   72,  286,   72,  286,  286,   72,   72,  258,  257,
       72,   72,   72,   72,   72,   72,   72,   72,  286,   72,
      260,  259,  286,   72,   72,  286,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,  286,   72,   72,
       72,  261,   72,   72,   72,   72,  263,  262,  264,   72,
       72,  286,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  265,   72,   72,   72,  286,   72,  286,  267,   72,
       72,  266,   72,   72,   72,   72,   72,  286,   72,   72,
       72,  269,   72,   72,   72,  268,   72,   72,  286,   72,
       72,   72,  270,   72,   72,   72,   72,   72,   72,  271,
       72,   72,   72,   72,  272,   72,   72,  286,  286,   72,
      273,   72,   72,   72,  286,   72,   72,   72,   72,  286,

       72,  286,   72,  274,   72,  275,   72,   72,   72,   72,
      276,   72,  277,   72,   72,   72,   72,   72,   72,   72,
       72,  279,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  278,   72,   72,   72,   72,   72,   72,  280,   72,
       72,  282,  286,   72,   72,   72,  281,  283,   72,   72,
       72,  284,   72,  286,   72,  286,   72,  285,  286,  286,
       72,   72,  286,  286,  286,   72,   72,  286,  286,  286,
       72,   72,  286,  286,  286,   72,  286,  286,  286,  286,
      286,   72,  286,  286,  286,   72,  286,   72,  286,  286,
      286,   72,  286,  286,  286,  286,  286,   72,  286,  286,

      286,   72,   57,   57,   57,   57,   59,   59,   59,   59,
       62,   62,   62,   62,   64,   64,   64,   64,   66,   66,
       66,   66,  119,  119,  286,  119,  120,  120,  120,  120,
      123,  286,  123,  123,    9,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286
    } ;

static yyconst flex_int16_t yy_chk[1289] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,   11,   20,   11,   20,   21,  297,
       21,   21,  293,    3,    3,   23,    3,   23,   49,   28,
       49,   28,   28,   58,   21,   23,    3,   33,   58,   33,
       33,   61,    3,   61,    3,   28,   34,   23,   34,   34,
       54,    3,   76,   33,   76,  120,   54,    3,    4,   33,

      120,   36,   34,   36,   36,  125,   39,  125,    4,    4,
       39,    4,   39,   33,   39,   39,   37,   36,   37,   37,
       36,    4,   56,  292,  115,   34,   56,    4,   36,    4,
      115,   41,   37,  121,  233,   41,    4,   41,  121,  209,
       41,   38,    4,   35,   38,   35,   35,  127,   38,  127,
       38,   40,  208,   38,   37,   40,   40,   40,   73,   35,
       40,  230,  207,   42,   42,   35,   73,  230,   42,   35,
       42,   35,   43,   42,   35,   43,   46,  206,   73,   43,
       46,   43,   46,   44,   43,   46,  166,   44,  166,   44,
       43,   44,   44,   46,  282,  205,  172,   44,   45,  171,

      282,   45,   45,  170,  169,   45,   50,   45,   50,   50,
       45,   47,  168,  167,   45,   47,   50,   47,   45,   47,
       47,   47,   50,   51,   52,   51,   52,   52,   75,  129,
      128,  284,   52,   51,   51,   53,   75,  284,   52,   53,
       52,   53,  108,   69,   53,   51,   55,   53,   75,   53,
       55,   55,   55,   72,   70,   55,   70,   72,   78,   79,
       66,   80,   78,   79,   70,   80,   81,   82,   83,   72,
       81,   82,   83,   72,   78,   79,   70,   80,   78,   79,
       64,   80,   81,   82,   83,   84,   81,   82,   83,   84,
       62,   84,   84,   85,   84,   87,   86,   85,   48,   87,

       86,   26,   88,   87,   88,   22,   88,   15,   14,   85,
       86,   87,   86,   85,   13,   87,   86,   89,   88,   90,
        9,   89,   88,   90,    8,   91,   92,   90,    7,   91,
       92,   89,    6,   89,    5,   90,    0,   89,    0,   90,
       91,   91,   92,   93,   94,   91,   92,   93,   94,   93,
       94,   93,   93,   94,   95,   96,    0,    0,   95,   96,
       95,   96,    0,   95,   96,   95,   97,    0,    0,   97,
       97,    0,   97,   98,  100,   97,    0,   98,  100,   98,
       99,   98,   98,    0,   99,    0,   99,   99,  101,   99,
      100,  102,  101,  103,  100,  102,  104,  103,    0,    0,

      104,  103,    0,    0,  101,    0,  102,  102,  101,  103,
      105,  102,  104,  103,  105,  106,  104,    0,    0,  106,
        0,  106,    0,  105,  106,  107,  105,    0,  114,  107,
      105,  107,  110,  109,  107,  109,  110,  112,  113,    0,
      110,  112,    0,  109,  109,  113,  114,    0,  110,  113,
      114,    0,  110,  112,  117,  109,  124,  112,  117,  118,
      126,  113,  114,  118,  124,  113,  114,    0,  126,  117,
      117,    0,    0,  118,  117,  118,  124,  130,  131,  118,
      126,  130,  131,    0,  131,  133,    0,  131,  134,  133,
      130,  136,  134,  130,  132,  136,    0,  130,  132,  132,

      132,  133,  135,  132,  134,  133,  135,  136,  134,  137,
      138,  136,  139,  137,  138,  135,  139,  140,  135,  140,
      141,  140,  135,  142,  141,  137,  138,  142,  139,  137,
      138,    0,  139,  140,    0,    0,  141,  140,  143,  142,
      141,  144,  143,  142,  143,  144,  145,  143,  146,  147,
      145,  148,  146,  147,  145,  148,  149,  144,  144,  150,
      149,  144,  145,  150,  146,  147,  145,  148,  146,  147,
      151,  148,  149,    0,  151,  150,  149,  155,  152,  150,
        0,  155,  152,  151,  152,  153,  151,  152,    0,  153,
      151,  153,  154,  155,  153,    0,  154,  155,  154,  154,

      156,  154,  157,  158,  156,    0,  157,  158,    0,  158,
      159,  156,  158,  160,  159,  161,  156,  160,  157,  161,
      156,  162,  157,  164,    0,  161,  159,  164,  162,  160,
      159,  161,  162,  160,  163,  161,  165,    0,  163,  164,
      165,  173,  163,  164,  162,  173,    0,  174,  162,    0,
      163,  174,  165,  165,  163,  175,  165,  173,  176,  175,
      177,  173,  176,  174,  177,  178,  175,  174,    0,  178,
        0,  175,  176,  178,  176,  175,  177,    0,  176,  179,
      177,  178,  180,  179,  181,  178,  180,  182,  181,    0,
      181,  182,    0,  181,    0,  179,  183,  184,  180,  179,

      183,  184,  180,  182,  183,  185,    0,  182,    0,  185,
        0,  183,  183,  184,  186,    0,  183,  184,  186,    0,
      186,  185,  187,  186,    0,  185,  187,    0,  187,  188,
      189,  187,  190,  188,  189,  191,  190,    0,  189,  191,
        0,  191,  190,    0,  191,  188,  189,  192,  190,  188,
      189,  192,  190,  192,  193,  194,  192,  195,  193,  194,
      193,  195,  196,  193,  197,  198,  196,    0,  197,  198,
      199,  194,  200,  195,  199,  194,  200,  195,  196,  201,
      197,  198,  196,  201,  197,  198,  199,  202,  200,  210,
      199,  202,  200,  210,  203,  201,    0,    0,  202,  201,

      203,    0,  204,  202,  204,  210,  204,  202,  211,  210,
        0,    0,  211,    0,  211,    0,  216,  211,  204,    0,
      216,  212,  204,    0,  203,  212,    0,  212,  203,  213,
      212,    0,  216,  213,    0,  213,  216,  214,  213,    0,
      203,  214,    0,  214,  203,  215,  214,    0,  217,  215,
        0,  215,  217,  218,  215,  219,  215,  218,  220,  219,
        0,  221,  220,    0,  217,  221,    0,  221,  217,  218,
      221,  219,    0,  218,  220,  219,  222,  223,  220,  224,
      222,  223,  222,  224,  222,  222,  225,    0,  227,    0,
      225,    0,  227,  223,  226,  224,  225,  223,  226,  224,

      226,  228,  225,  226,  227,  228,  225,  229,  227,  232,
      234,  229,  235,  232,  234,    0,  235,  228,    0,    0,
        0,  228,    0,  229,    0,  232,  234,  229,  235,  232,
      234,  236,  235,    0,  237,  236,    0,    0,  237,  236,
      237,    0,    0,  237,  238,    0,    0,  236,  238,    0,
      238,  236,  239,  238,    0,    0,  239,    0,  239,  240,
        0,  239,  242,  240,  239,  240,  242,  241,  240,    0,
      240,  241,    0,  241,    0,    0,  241,  243,  242,  241,
      244,  243,  242,  245,  244,  246,  247,  245,    0,  246,
      247,  243,    0,  243,  248,    0,  244,  243,  248,  245,

      244,  246,  247,  245,  249,  246,  247,    0,  249,  250,
      248,  248,  251,  250,  248,  252,  251,  249,  253,  252,
      249,    0,  253,  255,  249,  250,  257,  255,  251,  250,
      257,  252,  251,  254,  253,  252,  256,  254,  253,  255,
      256,  254,  257,  255,  258,    0,  257,    0,  258,  254,
      259,  256,  256,  254,  259,  260,  256,    0,  261,  260,
      258,  260,  261,  262,  258,  259,  259,  262,    0,  263,
      259,  260,  261,  263,  261,  260,  266,  264,  261,  262,
      266,  264,  265,  262,  263,  263,  265,    0,    0,  263,
      264,  267,  266,  264,    0,  267,  266,  264,  265,    0,

      268,    0,  265,  265,  268,  267,  269,  267,  270,  271,
      269,  267,  270,  271,  272,  273,  268,  274,  272,  273,
      268,  274,  269,  275,  270,  271,  269,  275,  270,  271,
      272,  273,  276,  274,  272,  273,  276,  274,  275,  275,
      278,  277,    0,  275,  278,  279,  276,  277,  276,  279,
      280,  281,  276,    0,  280,    0,  278,  281,    0,    0,
      278,  279,    0,    0,    0,  279,  280,    0,    0,    0,
      280,  277,    0,    0,    0,  277,    0,    0,    0,    0,
        0,  281,    0,    0,    0,  281,    0,  277,    0,    0,
        0,  277,    0,    0,    0,    0,    0,  281,    0,    0,

        0,  281,  287,  287,  287,  287,  288,  288,  288,  288,
      289,  289,  289,  289,  290,  290,  290,  290,  291,  291,
      291,  291,  294,  294,    0,  294,  295,  295,  295,  295,
      296,    0,  296,  296,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int zz_flex_debug;
int zz_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *zztext;
#line 1 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* -*-C++-*- */
#line 3 "../../../../../jags-4_patched/src/terminal/scanner.ll"
#include <iostream>
#include <string>
#include <cstring>
#include <compiler/ParseTree.h>
#include "parser.hh"

    std::vector<FILE*> file_stack;
    int command_buffer_count = 0;
    int buffer_count = 0;
    void return_to_main_buffer();
    void close_buffer();
    std::string ExpandFileName(char const *name);



#line 865 "scanner.cc"

#define INITIAL 0
#define RDATA 1
#define COMMENT 2
#define SYSTEM 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int zzlex_destroy (void );

int zzget_debug (void );

void zzset_debug (int debug_flag  );

YY_EXTRA_TYPE zzget_extra (void );

void zzset_extra (YY_EXTRA_TYPE user_defined  );

FILE *zzget_in (void );

void zzset_in  (FILE * _in_str  );

FILE *zzget_out (void );

void zzset_out  (FILE * _out_str  );

			int zzget_leng (void );

char *zzget_text (void );

int zzget_lineno (void );

void zzset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int zzwrap (void );
#else
extern int zzwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( zztext, (size_t) zzleng, 1, zzout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( zzin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( zzin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, zzin)) == 0 && ferror(zzin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(zzin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int zzlex (void);

#define YY_DECL int zzlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after zztext and zzleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! zzin )
			zzin = stdin;

		if ( ! zzout )
			zzout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			zzensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				zz_create_buffer(zzin,YY_BUF_SIZE );
		}

		zz_load_buffer_state( );
		}

	{
#line 26 "../../../../../jags-4_patched/src/terminal/scanner.ll"


#line 1089 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of zztext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 287 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1235 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MODEL; return MODEL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=DATA; return DATA;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=IN; return IN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=TO; return TO;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=INITS; return INITS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=PARAMETERS; return PARAMETERS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=COMPILE; return COMPILE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=NCHAINS; return NCHAINS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=INITIALIZE; return INITIALIZE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CHAIN; return CHAIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=UPDATE; return UPDATE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=ADAPT; return ADAPT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=FORCEADAPT; return FORCEADAPT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=AUTOADAPT; return AUTOADAPT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=BY; return BY;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 46 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MONITOR; return MONITOR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MONITORS; return MONITORS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=TYPE; return TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SET; return SET;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CLEAR; return CLEAR;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=THIN; return THIN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SAMPLER; return SAMPLER;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SAMPLERS; return SAMPLERS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=RNGTOK; return RNGTOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=FACTORY; return FACTORY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=FACTORIES; return FACTORIES;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 57 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MODULES; return MODULES;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 58 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SEED; return SEED;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 60 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CODA; return CODA;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 61 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=STEM; return STEM;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 63 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=LOAD; return LOAD;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 64 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=UNLOAD; return UNLOAD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 65 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=EXIT; return EXIT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 67 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=DIRECTORY; return DIRECTORY;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 68 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CD; return CD;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 69 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=PWD; return PWD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 70 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=RUN; return RUN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=LIST; return LIST;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 74 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ',';
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 75 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '[';
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 76 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ']';
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 77 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '(';
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 78 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ')';
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 79 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '=';
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 80 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ARROW;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 81 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '*';
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 82 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ':';
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 83 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ';';
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 84 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '`';
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 86 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(COMMENT);
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 87 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat up anything that's not a '*' */
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 88 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat up '*'s not followed by a '/'  */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 89 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(INITIAL);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 91 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat whitespace */
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 92 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat single-line comments */
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 93 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat newlines */
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 94 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ENDCMD;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 96 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(SYSTEM);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  return SYSCMD;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 101 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    BEGIN(INITIAL); return ENDCMD;
 }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 111 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 114 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.intval = atoi(zztext); return INT;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return DIM;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return DOTDATA;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return NA;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return R_NULL;
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 134 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return STRUCTURE;
	YY_BREAK
case 74:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 135 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return LIST;
	YY_BREAK
case 75:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 136 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return 'c';
	YY_BREAK
case 76:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 137 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ASINTEGER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 139 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{ 
  zzlval.stringptr = new std::string(zztext);
  return NAME;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 144 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  // More general than NAME which is limited to syntactically valid BUGS names
  zzlval.stringptr = new std::string(zztext);
  return STRING;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 150 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  // Remove enclosing quotes
  zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
  zzlval.stringptr->erase(0, 1);
  return STRING;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 158 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    zzlval.stringptr = new std::string(zztext);
    zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
    zzlval.stringptr->erase(0,1);
    return STRING;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 165 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    if (command_buffer_count) {
	close_buffer();
	--command_buffer_count;
    }
    else {
	yyterminate();
    }
    return ENDSCRIPT;
}
	YY_BREAK
case YY_STATE_EOF(RDATA):
#line 175 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    close_buffer();
    BEGIN(INITIAL);
    return ENDDATA;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "../../../../../jags-4_patched/src/terminal/scanner.ll"
ECHO;
	YY_BREAK
#line 1631 "scanner.cc"
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SYSTEM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed zzin at a new source and called
			 * zzlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = zzin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( zzwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * zztext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of zzlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					zzrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			zzrestart(zzin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) zzrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 287 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 287 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 286);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up zztext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					zzrestart(zzin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( zzwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve zztext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void zzrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        zzensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            zz_create_buffer(zzin,YY_BUF_SIZE );
	}

	zz_init_buffer(YY_CURRENT_BUFFER,input_file );
	zz_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void zz_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		zzpop_buffer_state();
	 *		zzpush_buffer_state(new_buffer);
     */
	zzensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	zz_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (zzwrap()) processing, but the only time this flag
	 * is looked at is after zzwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void zz_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	zzin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE zz_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) zzalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_is_our_buffer = 1;

	zz_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with zz_create_buffer()
 * 
 */
    void zz_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		zzfree((void *) b->yy_ch_buf  );

	zzfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a zzrestart() or at EOF.
 */
    static void zz_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	zz_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then zz_init_buffer was _probably_
     * called from zzrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void zz_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		zz_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	zzensure_buffer_stack();

	/* This block is copied from zz_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from zz_switch_to_buffer. */
	zz_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void zzpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	zz_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		zz_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void zzensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)zzalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in zzensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in zzensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE zz_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	zz_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to zzlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       zz_scan_bytes() instead.
 */
YY_BUFFER_STATE zz_scan_string (yyconst char * yystr )
{
    
	return zz_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to zzlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE zz_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) zzalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = zz_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in zz_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		zztext[zzleng] = (yy_hold_char); \
		(yy_c_buf_p) = zztext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		zzleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int zzget_lineno  (void)
{
        
    return zzlineno;
}

/** Get the input stream.
 * 
 */
FILE *zzget_in  (void)
{
        return zzin;
}

/** Get the output stream.
 * 
 */
FILE *zzget_out  (void)
{
        return zzout;
}

/** Get the length of the current token.
 * 
 */
int zzget_leng  (void)
{
        return zzleng;
}

/** Get the current token.
 * 
 */

char *zzget_text  (void)
{
        return zztext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void zzset_lineno (int  _line_number )
{
    
    zzlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see zz_switch_to_buffer
 */
void zzset_in (FILE *  _in_str )
{
        zzin = _in_str ;
}

void zzset_out (FILE *  _out_str )
{
        zzout = _out_str ;
}

int zzget_debug  (void)
{
        return zz_flex_debug;
}

void zzset_debug (int  _bdebug )
{
        zz_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from zzlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    zzin = stdin;
    zzout = stdout;
#else
    zzin = NULL;
    zzout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * zzlex_init()
     */
    return 0;
}

/* zzlex_destroy is for both reentrant and non-reentrant scanners. */
int zzlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		zz_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		zzpop_buffer_state();
	}

	/* Destroy the stack itself. */
	zzfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * zzlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *zzalloc (yy_size_t  size )
{
			return malloc(size);
}

void *zzrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void zzfree (void * ptr )
{
			free( (char *) ptr );	/* see zzrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 180 "../../../../../jags-4_patched/src/terminal/scanner.ll"



int zzwrap()
{
  return 1;
}

void push_file(FILE *file) {
    file_stack.push_back(file);
}

void pop_file() {
    if (file_stack.empty())
        return;

    fclose(file_stack.back());
    file_stack.pop_back();
}


bool open_data_buffer(std::string const *name) {
    FILE *file = fopen(ExpandFileName(name->c_str()).c_str(),"r");
    if (file) {
	zzpush_buffer_state(zz_create_buffer(file, YY_BUF_SIZE));
	push_file(file);
        ++buffer_count;
	BEGIN(RDATA);
	return true;
    }
    else {
	return false;
    }
}

void close_buffer() {
    zzpop_buffer_state();
    pop_file();
    --buffer_count;
}
    
bool open_command_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	file_stack.push_back(file);
	zzpush_buffer_state(zz_create_buffer(file, YY_BUF_SIZE ));
	++command_buffer_count;
        ++buffer_count;
	return true;
    }
    else {
	return false;
    }
}

void return_to_main_buffer() {
    /* Clear all buffers in the stack and return to the first */
    while(buffer_count) {
	zzpop_buffer_state();
	--buffer_count;
    }
    command_buffer_count = 0;
    BEGIN(INITIAL);
}


